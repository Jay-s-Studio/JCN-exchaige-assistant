"""Implement order and cart tables

Revision ID: 57d802e36157
Revises: 452224a6977a
Create Date: 2024-03-11 15:27:50.247013

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '57d802e36157'
down_revision: Union[str, None] = '452224a6977a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('cart',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='Primary Key'),
    sa.Column('message_id', sa.BigInteger(), nullable=True, comment='Message ID'),
    sa.Column('language', sa.String(length=8), nullable=True, comment='Message language. Enum option refer to Language'),
    sa.Column('group_name', sa.String(length=255), nullable=True, comment='Group Name'),
    sa.Column('group_id', sa.BigInteger(), nullable=True, comment='Group ID'),
    sa.Column('vendor_name', sa.String(length=255), nullable=True, comment='Vendor Name'),
    sa.Column('vendor_id', sa.BigInteger(), nullable=True, comment='Vendor ID'),
    sa.Column('account_name', sa.String(length=255), nullable=True, comment='Account Name'),
    sa.Column('account_id', sa.BigInteger(), nullable=True, comment='Account ID'),
    sa.Column('payment_currency', sa.String(length=8), nullable=True, comment='Payment Currency'),
    sa.Column('payment_amount', sa.Float(), nullable=True, comment='Payment Amount'),
    sa.Column('exchange_currency', sa.String(length=8), nullable=True, comment='Exchange Currency'),
    sa.Column('original_exchange_rate', sa.Float(), nullable=True, comment='Original Exchange Rate'),
    sa.Column('with_fee_exchange_rate', sa.Float(), nullable=True, comment='With Fee Exchange Rate'),
    sa.Column('status', sa.String(length=64), nullable=False, comment='Status. Enum option refer to CartStatus'),
    sa.Column('created_by_id', postgresql.UUID(), nullable=True, comment='Create User ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Create Date'),
    sa.Column('created_by', sa.String(length=64), nullable=False, comment='Create User Name'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Update Date'),
    sa.Column('updated_by_id', postgresql.UUID(), nullable=True, comment='Update User ID'),
    sa.Column('updated_by', sa.String(length=32), nullable=False, comment='Update User Name'),
    sa.Column('delete_reason', sa.String(length=64), nullable=True, comment='Delete Reason'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Is Deleted(Logical Delete)'),
    sa.ForeignKeyConstraint(['account_id'], ['public.telegram_account.id'], name='account_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['group_id'], ['public.telegram_chat_group.id'], name='group_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['vendor_id'], ['public.telegram_chat_group.id'], name='vendor_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_table('order',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='Primary Key'),
    sa.Column('order_no', sa.String(length=32), nullable=True, comment='Order No'),
    sa.Column('cart_id', postgresql.UUID(), nullable=False),
    sa.Column('expiration_of_pay', sa.DateTime(timezone=True), nullable=True, comment='Expiration of Pay'),
    sa.Column('status', sa.String(length=64), nullable=True, comment='Order Status. Enum option refer to OrderStatus'),
    sa.Column('created_by_id', postgresql.UUID(), nullable=True, comment='Create User ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Create Date'),
    sa.Column('created_by', sa.String(length=64), nullable=False, comment='Create User Name'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Update Date'),
    sa.Column('updated_by_id', postgresql.UUID(), nullable=True, comment='Update User ID'),
    sa.Column('updated_by', sa.String(length=32), nullable=False, comment='Update User Name'),
    sa.Column('delete_reason', sa.String(length=64), nullable=True, comment='Delete Reason'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Is Deleted(Logical Delete)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description'),
    sa.Column('remark', sa.String(length=256), nullable=True, comment='Remark'),
    sa.ForeignKeyConstraint(['cart_id'], ['public.cart.id'], name='cart_id_fkey', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_index(op.f('ix_public_order_order_no'), 'order', ['order_no'], unique=False, schema='public')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_public_order_order_no'), table_name='order', schema='public')
    op.drop_table('order', schema='public')
    op.drop_table('cart', schema='public')
    # ### end Alembic commands ###
