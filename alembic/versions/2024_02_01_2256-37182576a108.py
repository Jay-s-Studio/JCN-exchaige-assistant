"""Implement handing fee related tables and add email column to user table

Revision ID: 37182576a108
Revises: 028938fda4a9
Create Date: 2024-02-01 22:56:21.871040

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '37182576a108'
down_revision: Union[str, None] = '028938fda4a9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('handling_fee_config',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='Primary Key'),
    sa.Column('name', sa.String(length=32), nullable=True, comment='Name'),
    sa.Column('is_global', sa.Boolean(), server_default=sa.text('false'), nullable=True, comment='Is Global'),
    sa.Column('created_by_id', postgresql.UUID(), nullable=True, comment='Create User ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Create Date'),
    sa.Column('created_by', sa.String(length=64), nullable=False, comment='Create User Name'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Update Date'),
    sa.Column('updated_by_id', postgresql.UUID(), nullable=True, comment='Update User ID'),
    sa.Column('updated_by', sa.String(length=32), nullable=False, comment='Update User Name'),
    sa.Column('delete_reason', sa.String(length=64), nullable=True, comment='Delete Reason'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Is Deleted(Logical Delete)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description'),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    op.create_table('handling_fee_config_item',
    sa.Column('id', postgresql.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False, comment='Primary Key'),
    sa.Column('handling_fee_config_id', postgresql.UUID(), nullable=True, comment='Handling Fee Config ID'),
    sa.Column('currency_id', postgresql.UUID(), nullable=True, comment='Currency ID'),
    sa.Column('buy_calculation_type', sa.String(length=32), nullable=True, comment='Buy Calculation Type, Option: [addition|subtraction|multiplication|division]'),
    sa.Column('buy_value', sa.Float(), nullable=True, comment='Buy Value'),
    sa.Column('sell_calculation_type', sa.String(length=32), nullable=True, comment='Sell Calculation Type, Option: [addition|subtraction|multiplication|division]'),
    sa.Column('sell_value', sa.Float(), nullable=True, comment='Sell Value'),
    sa.Column('created_by_id', postgresql.UUID(), nullable=True, comment='Create User ID'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Create Date'),
    sa.Column('created_by', sa.String(length=64), nullable=False, comment='Create User Name'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Update Date'),
    sa.Column('updated_by_id', postgresql.UUID(), nullable=True, comment='Update User ID'),
    sa.Column('updated_by', sa.String(length=32), nullable=False, comment='Update User Name'),
    sa.Column('delete_reason', sa.String(length=64), nullable=True, comment='Delete Reason'),
    sa.Column('is_deleted', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Is Deleted(Logical Delete)'),
    sa.ForeignKeyConstraint(['currency_id'], ['public.currency.id'], name='currency_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['handling_fee_config_id'], ['public.handling_fee_config.id'], name='handling_fee_config_relation_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('handling_fee_config_id', 'currency_id', name='unique_handling_fee_config_item_key'),
    schema='public'
    )
    op.drop_constraint('currency_id_fkey', 'currency', type_='foreignkey')
    op.create_foreign_key('currency_id_fkey', 'currency', 'currency', ['parent_id'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.drop_constraint('exchange_rate_currency_id_fkey', 'exchange_rate', type_='foreignkey')
    op.drop_constraint('exchange_rate_telegram_chat_group_id_fkey', 'exchange_rate', type_='foreignkey')
    op.create_foreign_key('exchange_rate_currency_id_fkey', 'exchange_rate', 'currency', ['currency_id'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.create_foreign_key('exchange_rate_telegram_chat_group_id_fkey', 'exchange_rate', 'telegram_chat_group', ['telegram_chat_group_id'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.add_column('telegram_chat_group', sa.Column('handling_fee_config_id', postgresql.UUID(), nullable=True, comment='Handling Fee Config ID'))
    op.drop_constraint('currency_id_fkey', 'telegram_chat_group', type_='foreignkey')
    op.create_foreign_key('currency_id_fkey', 'telegram_chat_group', 'currency', ['currency_id'], ['id'], source_schema='public', referent_schema='public', ondelete='SET NULL')
    op.create_foreign_key('handling_fee_config_relation_id_fkey', 'telegram_chat_group', 'handling_fee_config', ['handling_fee_config_id'], ['id'], source_schema='public', referent_schema='public', ondelete='SET NULL')
    op.drop_constraint('unique_telegram_chat_group_member_uc', 'telegram_chat_group_member', type_='unique')
    op.create_unique_constraint('unique_telegram_chat_group_member_key', 'telegram_chat_group_member', ['account_id', 'chat_group_id'], schema='public')
    op.drop_constraint('telegram_account_relation_account_id_fkey', 'telegram_chat_group_member', type_='foreignkey')
    op.drop_constraint('telegram_account_relation_chat_group_id_fkey', 'telegram_chat_group_member', type_='foreignkey')
    op.create_foreign_key('telegram_account_relation_account_id_fkey', 'telegram_chat_group_member', 'telegram_account', ['account_id'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.create_foreign_key('telegram_account_relation_chat_group_id_fkey', 'telegram_chat_group_member', 'telegram_chat_group', ['chat_group_id'], ['id'], source_schema='public', referent_schema='public', ondelete='CASCADE')
    op.add_column('user', sa.Column('email', sa.String(length=255), nullable=True, comment='Email'))
    op.create_unique_constraint('user_email_key', 'user', ['email'], schema='public')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint('user_email_key', 'user', schema='public', type_='unique')
    op.drop_column('user', 'email')
    op.drop_constraint('telegram_account_relation_chat_group_id_fkey', 'telegram_chat_group_member', schema='public', type_='foreignkey')
    op.drop_constraint('telegram_account_relation_account_id_fkey', 'telegram_chat_group_member', schema='public', type_='foreignkey')
    op.create_foreign_key('telegram_account_relation_chat_group_id_fkey', 'telegram_chat_group_member', 'telegram_chat_group', ['chat_group_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('telegram_account_relation_account_id_fkey', 'telegram_chat_group_member', 'telegram_account', ['account_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('unique_telegram_chat_group_member_key', 'telegram_chat_group_member', schema='public', type_='unique')
    op.create_unique_constraint('unique_telegram_chat_group_member_uc', 'telegram_chat_group_member', ['account_id', 'chat_group_id'])
    op.drop_constraint('handling_fee_config_relation_id_fkey', 'telegram_chat_group', schema='public', type_='foreignkey')
    op.drop_constraint('currency_id_fkey', 'telegram_chat_group', schema='public', type_='foreignkey')
    op.create_foreign_key('currency_id_fkey', 'telegram_chat_group', 'currency', ['currency_id'], ['id'], ondelete='SET NULL')
    op.drop_column('telegram_chat_group', 'handling_fee_config_id')
    op.drop_constraint('exchange_rate_telegram_chat_group_id_fkey', 'exchange_rate', schema='public', type_='foreignkey')
    op.drop_constraint('exchange_rate_currency_id_fkey', 'exchange_rate', schema='public', type_='foreignkey')
    op.create_foreign_key('exchange_rate_telegram_chat_group_id_fkey', 'exchange_rate', 'telegram_chat_group', ['telegram_chat_group_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('exchange_rate_currency_id_fkey', 'exchange_rate', 'currency', ['currency_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint('currency_id_fkey', 'currency', schema='public', type_='foreignkey')
    op.create_foreign_key('currency_id_fkey', 'currency', 'currency', ['parent_id'], ['id'], ondelete='CASCADE')
    op.drop_table('handling_fee_config_item', schema='public')
    op.drop_table('handling_fee_config', schema='public')
    # ### end Alembic commands ###
